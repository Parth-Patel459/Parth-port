# GitHub Pages Deployment Guide

This guide will help you deploy your portfolio website using GitHub Pages, which allows you to host your website directly from your GitHub repository.

## Step 1: Prepare Your Repository

### Option 1: Create a User/Organization Site
For a site that will be available at `username.github.io`:

1. Create a new GitHub repository named exactly as `username.github.io`, where `username` is your GitHub username
2. If you already have a repository, rename it to match this pattern

### Option 2: Create a Project Site
For a site that will be available at `username.github.io/repository-name`:

1. Use your existing repository (no need to rename it)
2. Your site will be accessible at `username.github.io/repository-name`

## Step 2: Upload Your Files

1. Clone your repository to your local machine:
   ```
   git clone https://github.com/username/repository-name.git
   ```

2. Copy all your website files into the repository folder, maintaining the structure:
   - index.html
   - styles.css
   - script.js
   - resume.html
   - resource1.html
   - Any images, PDFs, and other assets in an `/assets` folder

3. Create a folder structure as follows:
   ```
   repository-root/
   ├── index.html
   ├── resume.html
   ├── resource1.html
   ├── styles.css
   ├── resume-styles.css
   ├── script.js
   ├── resume-script.js
   ├── favicon.png
   ├── 404.html
   ├── thanks.html
   ├── assets/
   │   ├── background1.jpg
   │   ├── background2.jpg
   │   ├── background3.jpg
   │   ├── Parth-Patel.jpeg
   │   ├── Parth-Patel-Profile-image.jpg
   │   ├── project1.jpg
   │   ├── project2.jpg
   │   ├── project3.jpg
   │   ├── blog1.jpg
   │   ├── blog2.jpg
   │   ├── blog3.jpg
   │   └── ParthPatelCV.pdf
   └── .github/
       └── workflows/
           └── deploy.yml (optional for automatic deployment)
   ```

4. Add, commit, and push your changes to GitHub:
   ```
   git add .
   git commit -m "Add website files for GitHub Pages"
   git push origin main
   ```

## Step 3: Enable GitHub Pages

1. Go to your repository on GitHub.com
2. Click on "Settings" near the top of the page
3. Scroll down to the "GitHub Pages" section (or click on "Pages" in the left sidebar)
4. Under "Source", select "main" branch (or whatever branch contains your website files)
5. Click "Save"
6. Wait a few minutes for your site to be published

After your site is published, you'll see a message saying "Your site is published at https://username.github.io" or "Your site is published at https://username.github.io/repository-name"

## Step 4: Check Your Deployment

1. Visit the URL provided in the GitHub Pages section of your repository settings
2. Verify that your website displays correctly
3. Check all links, images, and functionality

## Optional: Custom Domain Setup

If you have your own domain name, you can configure GitHub Pages to use it:

1. In your repository's Settings > Pages section, enter your custom domain in the "Custom domain" field
2. Click "Save"
3. Configure your domain provider's DNS settings:
   - For an apex domain (example.com):
     - Add A records pointing to GitHub Pages IP addresses:
       ```
       185.199.108.153
       185.199.109.153
       185.199.110.153
       185.199.111.153
       ```
   - For a subdomain (www.example.com):
     - Add a CNAME record pointing to your GitHub Pages URL: `username.github.io`
4. Wait for DNS changes to propagate (can take up to 24 hours)
5. Create a file named `CNAME` in your repository root (GitHub will create this automatically if you add the custom domain through the Settings page)

## Troubleshooting

If your site doesn't display correctly:

1. Check the GitHub Pages settings to ensure your site is being published from the correct branch
2. Verify all file paths are relative and correct (use `./` at the beginning of your paths)
3. Make sure all links between pages use the correct paths
4. Check for any errors in the browser's developer console (F12)
5. Ensure all external resources (like fonts and CDNs) use HTTPS, not HTTP
6. If you're using a custom domain, verify your DNS configuration is correct

## Maintaining Your Site

To update your site after making changes:

1. Make your changes locally
2. Test them in your browser before pushing
3. Commit and push your changes to the main branch:
   ```
   git add .
   git commit -m "Describe your changes"
   git push origin main
   ```
4. GitHub Pages will automatically rebuild and deploy your site

## Additional Tips

1. Add a `.nojekyll` file in your repository root to prevent GitHub Pages from processing your site with Jekyll (a static site generator)
2. To enable HTTPS for custom domains, check the "Enforce HTTPS" box in the GitHub Pages settings after your custom domain is verified
3. For better performance, optimize your images and minify your CSS and JavaScript files
4. Test your website on different devices and browsers to ensure compatibility
5. Consider using GitHub Actions for more advanced build and deployment workflows
